interactions:
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      User-Agent: ['PythonRuFetcher/1.0 +https://python.ru/']
      x-api-key: [xxx]
    method: GET
    uri: https://mercury.postlight.com/parser?url=https%3A%2F%2Fsemaphoreci.com%2Fcommunity%2Ftutorials%2Fsetting-up-a-bdd-stack-on-a-django-application
  response:
    body: {string: '{"title":"Setting Up a BDD Stack on a Django Application","author":null,"date_published":null,"dek":null,"lead_image_url":"https://d1dkupr86d302v.cloudfront.net/community/assets/social-media-icons/icon-tag-python-8741b02e76dd7b99e8e0333826ae4c946541c198e136eb928edf84908aa51b36.png","content":"<div><p
        class=\"page-subtitle page-intro\">Boost your Django and Python stack with
        Behavior Driven Development. Learn to write great BDD tests for your application
        and avoid use-case mistakes.</p><section id=\"tutorial-content\" class=\"block-center-img\">
        <p>This tutorial will guide you through installing <a href=\"https://pythonhosted.org/behave/django.html\"><code>behave_django</code></a>
        and <a href=\"https://pythonhosted.org/behave/django.html\"><code>FactoryBoy</code></a>
        to set up a BDD stack for a Django application. For this purpose, we will
        create a simple login form as a base for developing BDD tests.</p> <p><a href=\"https://semaphoreci.com/community/tutorials/behavior-driven-development\">BDD</a>
        puts the user at the center of your tests. It is an increasingly popular method
        that helps you validate your code from an end-user point of view. Tests are
        expressed as scenarios (use cases).</p> <h3>Prerequisites</h3> <p>In this
        tutorial, we are assuming you are running on MacOS or Linux. It may work on
        Windows machines with some changes to the commands we provide.</p> <p>This
        tutorial also requires:</p> <ul> <li>Python (preferably 2.7+, 3.4+)</li> <li>PIP
        (Python package manager)</li> </ul> <h2>Initiating the Project</h2> <p>Start
        by creating a Django application as follows:</p> <div class=\"highlight highlight-bash\"><pre>pip
        install django django-admin startproject bdd_example <span class=\"nb\">cd
        </span>bdd_example/ </pre></div> <p>Since this tutorial serves as an example
        to kickstart your BDD project, we will use Django&apos;s default settings,
        as well as the default SQLite database driver. Follow the steps <a href=\"https://docs.djangoproject.com/en/1.8/intro/tutorial01/\">of
        this Django guide</a> if you need special configuration.</p> <h2>Installing
        behave_django</h2> <p><code>behave_django</code> will be used to run BDD feature
        tests via the Behave module. <em>Feature</em> can be read as another word
        for <em>scenario</em>.</p> <p>Before starting to develop your application,
        ensure that <code>phantomjs</code> is available on your system:</p> <p>If
        the command returns &quot;not found&quot;, you will need to install <code>phantomjs</code>
        by <a href=\"http://phantomjs.org/\">downloading it from there</a>. If you
        are running Ubuntu or Debian, <a href=\"https://gist.github.com/julionc/7476620\">this
        thread will help you install it on your system</a>.</p> <p>Ensure <code>selenium</code>
        is installed. It will enable you to connect to PhantomJS from your tests:</p>
        <p>For headless browser testing purposes, <code>phantomjs</code> will be used
        by Behave through <code>selenium</code>. This will prevent your system from
        launching a Firefox browser UI to perform the tests, and will allow you to
        easily execute tests on test servers (which, by nature, do not dispose of
        a graphical environment).</p> <p>You can now install <code>behave_django</code>
        using PIP:</p> <div class=\"highlight highlight-bash\"><pre>pip install behave_django
        </pre></div> <p>Edit the <code>bdd_example/settings.py</code> file to add
        the <code>behave_django</code> application to your <code>INSTALLED_APPS</code>,
        so that your <code>INSTALLED_APPS</code> looks as follows:</p> <div class=\"highlight
        highlight-python\"><pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span>
        <span class=\"p\">(</span> <span class=\"s\">&apos;behave_django&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.admin&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.auth&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.contenttypes&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.sessions&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.messages&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.staticfiles&apos;</span><span
        class=\"p\">,</span> <span class=\"p\">)</span> </pre></div> <h2>Installing
        FactoryBoy</h2> <p>We&apos;ll use <code>FactoryBoy</code> to create easy-to-use
        fixtures for our tests. Fixtures are a great way to populate your app with
        mock data, thus simulating a real-world use of your app.</p> <p>They help
        you with the following:</p> <ul> <li>When you update your database schema,
        you only need to update the factory.</li> <li>They help factoring code by
        reducing the amount of &quot;junk&quot; code you put in your tests, making
        them clearer.</li> <li>They reduce the time spent on testing and may in some
        cases speed up test execution.</li> </ul> <p>Install <code>FactoryBoy</code>
        using PIP:</p> <h2>Writing the Login Form</h2> <p>After installing Behave
        and FactoryBoy, we will need to create a login application to be tested. It
        will consist of three templates, supporting view code and routes.</p> <h3>Initializing
        the Application</h3> <p>Let&apos;s initiate the login application:</p> <div
        class=\"highlight highlight-bash\"><pre>python manage.py startapp login <span
        class=\"nb\">cd </span>login/ </pre></div> <p>Edit the <code>../bdd_example/settings.py</code>
        file to add the <code>login</code> app to your <code>INSTALLED_APPS</code>,
        so that <code>INSTALLED_APPS</code> looks as follows:</p> <div class=\"highlight
        highlight-python\"><pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span>
        <span class=\"p\">(</span> <span class=\"s\">&apos;login&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;behave_django&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.admin&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.auth&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.contenttypes&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.sessions&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.messages&apos;</span><span
        class=\"p\">,</span> <span class=\"s\">&apos;django.contrib.staticfiles&apos;</span><span
        class=\"p\">,</span> <span class=\"p\">)</span> </pre></div> <h3>Creating
        Templates</h3> <p>Our login application requires three templates - the login
        form itself, the fail template and the success template.</p> <p>First, we&apos;ll
        need to create the template folder which will contain all of our views:</p>
        <h4>Login Form Template</h4> <p>The next step is to create <code>templates/login_root.html</code>
        and paste the following template code:</p> <div class=\"highlight highlight-html\"><pre><span
        class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">&quot;/login/&quot;</span>
        <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span><span
        class=\"nt\">&gt;</span> {% csrf_token %} <span class=\"nt\">&lt;div&gt;</span>
        <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;username&quot;</span><span
        class=\"nt\">&gt;</span>Username<span class=\"nt\">&lt;/label&gt;</span> <span
        class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text&quot;</span>
        <span class=\"na\">name=</span><span class=\"s\">&quot;username&quot;</span>
        <span class=\"na\">id=</span><span class=\"s\">&quot;username&quot;</span><span
        class=\"nt\">&gt;</span> <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span
        class=\"s\">&quot;password&quot;</span><span class=\"nt\">&gt;</span>Password<span
        class=\"nt\">&lt;/label&gt;</span> <span class=\"nt\">&lt;input</span> <span
        class=\"na\">type=</span><span class=\"s\">&quot;password&quot;</span> <span
        class=\"na\">name=</span><span class=\"s\">&quot;password&quot;</span> <span
        class=\"na\">id=</span><span class=\"s\">&quot;password&quot;</span><span
        class=\"nt\">&gt;</span> <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span
        class=\"s\">&quot;submit&quot;</span> <span class=\"na\">name=</span><span
        class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span
        class=\"s\">&quot;login&quot;</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;/div&gt;</span>
        <span class=\"nt\">&lt;/form&gt;</span> </pre></div> <h4>Login Success Template</h4>
        <p>Create the login success message template in <code>templates/login_success.html</code>
        and paste the following template code:</p> <div class=\"highlight highlight-html\"><pre><span
        class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">&quot;main_title&quot;</span><span
        class=\"nt\">&gt;</span>Login success<span class=\"nt\">&lt;/h1&gt;</span>
        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;../&quot;</span><span
        class=\"nt\">&gt;</span>Back to login form (we do not remember sessions)<span
        class=\"nt\">&lt;/a&gt;</span> </pre></div> <h4>Login Fail Template</h4> <p>Create
        the login fail message template in <code>templates/login_fail.html</code>
        and paste the following template code:</p> <div class=\"highlight highlight-html\"><pre><span
        class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">&quot;main_title&quot;</span><span
        class=\"nt\">&gt;</span>Login failure<span class=\"nt\">&lt;/h1&gt;</span>
        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;../&quot;</span><span
        class=\"nt\">&gt;</span>Back to login form, try again!<span class=\"nt\">&lt;/a&gt;</span>
        </pre></div> <h3>Creating a View</h3> <p>Next, we will create the view that
        will render the template file in <code>views.py</code> and paste the following
        code:</p> <div class=\"highlight highlight-python\"><pre><span class=\"kn\">from</span>
        <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span>
        <span class=\"n\">render</span> <span class=\"kn\">from</span> <span class=\"nn\">django.core.urlresolvers</span>
        <span class=\"kn\">import</span> <span class=\"n\">reverse</span> <span class=\"kn\">from</span>
        <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span
        class=\"n\">HttpResponseRedirect</span> <span class=\"kn\">from</span> <span
        class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span
        class=\"n\">authenticate</span> <span class=\"k\">def</span> <span class=\"nf\">login_root</span><span
        class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>
        <span class=\"c\"># Login form submitted?</span> <span class=\"k\">if</span>
        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span>
        <span class=\"o\">==</span> <span class=\"s\">&apos;POST&apos;</span><span
        class=\"p\">:</span> <span class=\"n\">username</span><span class=\"o\">=</span><span
        class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span
        class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span
        class=\"s\">&apos;username&apos;</span><span class=\"p\">)</span> <span class=\"n\">password</span><span
        class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span
        class=\"n\">POST</span><span class=\"o\">.</span><span class=\"n\">get</span><span
        class=\"p\">(</span><span class=\"s\">&apos;password&apos;</span><span class=\"p\">)</span>
        <span class=\"k\">if</span> <span class=\"n\">username</span> <span class=\"ow\">and</span>
        <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">user</span>
        <span class=\"o\">=</span> <span class=\"n\">authenticate</span><span class=\"p\">(</span><span
        class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span
        class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span
        class=\"n\">password</span><span class=\"p\">)</span> <span class=\"c\">#
        Login succeeded</span> <span class=\"k\">if</span> <span class=\"n\">user</span>
        <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span
        class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span
        class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span
        class=\"s\">&apos;login.views.login_success&apos;</span><span class=\"p\">))</span>
        <span class=\"c\"># Login failed</span> <span class=\"k\">return</span> <span
        class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span
        class=\"p\">(</span><span class=\"s\">&apos;login.views.login_fail&apos;</span><span
        class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"n\">render</span><span
        class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span>
        <span class=\"s\">&apos;login_root.html&apos;</span><span class=\"p\">)</span>
        <span class=\"k\">def</span> <span class=\"nf\">login_success</span><span
        class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>
        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span
        class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">&apos;login_success.html&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">def</span> <span class=\"nf\">login_fail</span><span
        class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>
        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span
        class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">&apos;login_fail.html&apos;</span><span
        class=\"p\">)</span> </pre></div> <h3>Defining Routes</h3> <p>Now that we
        have the view, we can bind it to the login route.</p> <p>Edit the <code>../bdd_example/urls.py</code>
        file to import the following package:</p> <div class=\"highlight highlight-python\"><pre><span
        class=\"kn\">from</span> <span class=\"nn\">login</span> <span class=\"kn\">import</span>
        <span class=\"n\">views</span> <span class=\"k\">as</span> <span class=\"n\">login_views</span>
        </pre></div> <p>Next, we&apos;ll append our login routes to the existing <code>urlpatterns</code>
        so that it looks as follows:</p> <div class=\"highlight highlight-python\"><pre><span
        class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>
        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r&apos;^admin/&apos;</span><span
        class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span
        class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span
        class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>
        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r&apos;^login/$&apos;</span><span
        class=\"p\">,</span> <span class=\"n\">login_views</span><span class=\"o\">.</span><span
        class=\"n\">login_root</span><span class=\"p\">,</span> <span class=\"n\">name</span><span
        class=\"o\">=</span><span class=\"s\">&apos;login_root&apos;</span><span class=\"p\">),</span>
        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r&apos;^login/success/$&apos;</span><span
        class=\"p\">,</span> <span class=\"n\">login_views</span><span class=\"o\">.</span><span
        class=\"n\">login_success</span><span class=\"p\">,</span> <span class=\"n\">name</span><span
        class=\"o\">=</span><span class=\"s\">&apos;login_success&apos;</span><span
        class=\"p\">),</span> <span class=\"n\">url</span><span class=\"p\">(</span><span
        class=\"s\">r&apos;^login/fail/$&apos;</span><span class=\"p\">,</span> <span
        class=\"n\">login_views</span><span class=\"o\">.</span><span class=\"n\">login_fail</span><span
        class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span
        class=\"s\">&apos;login_fail&apos;</span><span class=\"p\">)</span> <span
        class=\"p\">]</span> </pre></div> <p>We now have a simple login application
        that we can test.</p> <h3>Testing the Application</h3> <p>It&apos;s time to
        test the application we just wrote:</p> <div class=\"highlight highlight-bash\"><pre><span
        class=\"nb\">cd</span> ../ python manage.py runserver </pre></div> <p>Let&apos;s
        point our Web browser to <code>http://127.0.0.1:8000/login/</code>.</p> <p>Since
        your user database is empty, each login you submit should fail with an error
        message. If you did not start from scratch and you already had Django accounts
        in your database, you should be able to log into the existing accounts.</p>
        <h2>Writing FactoryBoy Factories</h2> <p>The login form test requires a dummy
        user to be instantiated &#x2014; a factory can help with this.</p> <p>Create
        the user factory file:</p> <div class=\"highlight highlight-bash\"><pre>mkdir
        -p <span class=\"nb\">test</span>/factories/ touch <span class=\"nb\">test</span>/__init__.py
        <span class=\"nb\">test</span>/factories/__init__.py </pre></div> <p>Place
        the following code in the <code>test/factories/user.py</code> file:</p> <div
        class=\"highlight highlight-bash\"><pre>import factory from django.contrib.auth.models
        import User class UserFactory<span class=\"o\">(</span>factory.django.DjangoModelFactory<span
        class=\"o\">)</span>: class Meta: <span class=\"nv\">model</span> <span class=\"o\">=</span>
        User <span class=\"nv\">django_get_or_create</span> <span class=\"o\">=</span>
        <span class=\"o\">(</span><span class=\"s1\">&apos;username&apos;</span>,
        <span class=\"s1\">&apos;email&apos;</span><span class=\"o\">)</span> <span
        class=\"c\"># Defaults (can be overrided)</span> <span class=\"nv\">username</span>
        <span class=\"o\">=</span> <span class=\"s1\">&apos;john.doe&apos;</span>
        <span class=\"nv\">email</span> <span class=\"o\">=</span> <span class=\"s1\">&apos;john.doe@example.com&apos;</span>
        </pre></div> <p>Note that this factory is directly bound to the built-in Django
        user model - <code>models.User</code>. It doesn&apos;t require you to write
        a custom model.</p> <h2>Writing Behave Scenarios</h2> <p>Behave tests are
        made of 2 types of files:</p> <ul> <li> <strong>Feature description</strong>:
        contains the human-readable form of your tests, written as scenarios (named
        <code>test_file.feature</code>)</li> <li> <strong>Test script</strong>: contains
        the machine-executable form of your tests, written in Python (named <code>test_file.py</code>)</li>
        </ul> <h3>Describing Features</h3> <p>We will start by defining the tests
        in a human-readable form.</p> <p>First, create the test container folder:</p>
        <p>Then, create the feature file <code>features/login.feature</code> and place
        the following content in it:</p> <pre><code>Feature: Login form Scenario:
        Access the login form Given an anonymous user When I submit a valid login
        page Then I am redirected to the login success page Given an anonymous user
        When I submit an invalid login page Then I am redirected to the login fail
        page </code></pre> <h3>Writing Automated Tests</h3> <p>The test script is
        deeply linked to the feature description, since it contains references to
        our feature file.</p> <h4>Initializing the Test Environment</h4> <p>We&apos;ll
        start by initializing the test environment and determining which test browser
        to use, since we will rely on a Web browser to execute our tests.</p> <p>Append
        the following code in <code>features/environment.py</code>:</p> <div class=\"highlight
        highlight-python\"><pre><span class=\"kn\">from</span> <span class=\"nn\">selenium</span>
        <span class=\"kn\">import</span> <span class=\"n\">webdriver</span> <span
        class=\"k\">def</span> <span class=\"nf\">before_all</span><span class=\"p\">(</span><span
        class=\"n\">context</span><span class=\"p\">):</span> <span class=\"c\">#
        PhantomJS is used there (headless browser - meaning we can execute tests in
        a command-line environment, which is what we want for use with SemaphoreCI</span>
        <span class=\"c\"># For debugging purposes, you can use the Firefox driver
        instead.</span> <span class=\"n\">context</span><span class=\"o\">.</span><span
        class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span
        class=\"o\">.</span><span class=\"n\">PhantomJS</span><span class=\"p\">()</span>
        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">browser</span><span
        class=\"o\">.</span><span class=\"n\">implicitly_wait</span><span class=\"p\">(</span><span
        class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">server_url</span> <span class=\"o\">=</span>
        <span class=\"s\">&apos;http://localhost:8000&apos;</span> <span class=\"k\">def</span>
        <span class=\"nf\">after_all</span><span class=\"p\">(</span><span class=\"n\">context</span><span
        class=\"p\">):</span> <span class=\"c\"># Explicitly quits the browser, otherwise
        it won&apos;t once tests are done</span> <span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">browser</span><span class=\"o\">.</span><span
        class=\"n\">quit</span><span class=\"p\">()</span> <span class=\"k\">def</span>
        <span class=\"nf\">before_feature</span><span class=\"p\">(</span><span class=\"n\">context</span><span
        class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"p\">):</span>
        <span class=\"c\"># Code to be executed each time a feature is going to be
        tested</span> <span class=\"k\">pass</span> </pre></div> <h4>Test Procedure</h4>
        <p>Next, we&apos;ll create the test script by placing the following code in
        <code>features/steps/login.py</code>:</p> <div class=\"highlight highlight-python\"><pre><span
        class=\"kn\">from</span> <span class=\"nn\">behave</span> <span class=\"kn\">import</span>
        <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">when</span><span
        class=\"p\">,</span> <span class=\"n\">then</span> <span class=\"kn\">from</span>
        <span class=\"nn\">test.factories.user</span> <span class=\"kn\">import</span>
        <span class=\"n\">UserFactory</span> <span class=\"nd\">@given</span><span
        class=\"p\">(</span><span class=\"s\">&apos;an anonymous user&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span
        class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>
        <span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span>
        <span class=\"kn\">import</span> <span class=\"n\">User</span> <span class=\"c\">#
        Creates a dummy user for our tests (user is not authenticated at this point)</span>
        <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span
        class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span
        class=\"s\">&apos;foo&apos;</span><span class=\"p\">,</span> <span class=\"n\">email</span><span
        class=\"o\">=</span><span class=\"s\">&apos;foo@example.com&apos;</span><span
        class=\"p\">)</span> <span class=\"n\">u</span><span class=\"o\">.</span><span
        class=\"n\">set_password</span><span class=\"p\">(</span><span class=\"s\">&apos;bar&apos;</span><span
        class=\"p\">)</span> <span class=\"c\"># Don&apos;t omit to call save() to
        insert object in database</span> <span class=\"n\">u</span><span class=\"o\">.</span><span
        class=\"n\">save</span><span class=\"p\">()</span> <span class=\"nd\">@when</span><span
        class=\"p\">(</span><span class=\"s\">&apos;I submit a valid login page&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span
        class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>
        <span class=\"n\">br</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">browser</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span
        class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">base_url</span>
        <span class=\"o\">+</span> <span class=\"s\">&apos;/login/&apos;</span><span
        class=\"p\">)</span> <span class=\"c\"># Checks for Cross-Site Request Forgery
        protection input</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span
        class=\"s\">&apos;csrfmiddlewaretoken&apos;</span><span class=\"p\">)</span><span
        class=\"o\">.</span><span class=\"n\">is_enabled</span><span class=\"p\">()</span>
        <span class=\"c\"># Fill login form and submit it (valid version)</span> <span
        class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span
        class=\"p\">(</span><span class=\"s\">&apos;username&apos;</span><span class=\"p\">)</span><span
        class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span
        class=\"s\">&apos;foo&apos;</span><span class=\"p\">)</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span
        class=\"s\">&apos;password&apos;</span><span class=\"p\">)</span><span class=\"o\">.</span><span
        class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s\">&apos;bar&apos;</span><span
        class=\"p\">)</span> <span class=\"n\">br</span><span class=\"o\">.</span><span
        class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s\">&apos;submit&apos;</span><span
        class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span
        class=\"p\">()</span> <span class=\"nd\">@then</span><span class=\"p\">(</span><span
        class=\"s\">&apos;I am redirected to the login success page&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span
        class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>
        <span class=\"n\">br</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">browser</span> <span class=\"c\"># Checks
        success status</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"o\">.</span><span
        class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&apos;/login/success/&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_id</span><span class=\"p\">(</span><span
        class=\"s\">&apos;main_title&apos;</span><span class=\"p\">)</span><span class=\"o\">.</span><span
        class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s\">&quot;Login
        success&quot;</span> <span class=\"nd\">@when</span><span class=\"p\">(</span><span
        class=\"s\">&apos;I submit an invalid login page&apos;</span><span class=\"p\">)</span>
        <span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span class=\"p\">(</span><span
        class=\"n\">context</span><span class=\"p\">):</span> <span class=\"n\">br</span>
        <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span
        class=\"n\">browser</span> <span class=\"n\">br</span><span class=\"o\">.</span><span
        class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">base_url</span> <span class=\"o\">+</span>
        <span class=\"s\">&apos;/login/&apos;</span><span class=\"p\">)</span> <span
        class=\"c\"># Checks for Cross-Site Request Forgery protection input (once
        again)</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span
        class=\"s\">&apos;csrfmiddlewaretoken&apos;</span><span class=\"p\">)</span><span
        class=\"o\">.</span><span class=\"n\">is_enabled</span><span class=\"p\">()</span>
        <span class=\"c\"># Fill login form and submit it (invalid version)</span>
        <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span
        class=\"p\">(</span><span class=\"s\">&apos;username&apos;</span><span class=\"p\">)</span><span
        class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span
        class=\"s\">&apos;foo&apos;</span><span class=\"p\">)</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span
        class=\"s\">&apos;password&apos;</span><span class=\"p\">)</span><span class=\"o\">.</span><span
        class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s\">&apos;bar-is-invalid&apos;</span><span
        class=\"p\">)</span> <span class=\"n\">br</span><span class=\"o\">.</span><span
        class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s\">&apos;submit&apos;</span><span
        class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span
        class=\"p\">()</span> <span class=\"nd\">@then</span><span class=\"p\">(</span><span
        class=\"s\">&apos;I am redirected to the login fail page&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">def</span> <span class=\"nf\">step_impl</span><span
        class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>
        <span class=\"n\">br</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span
        class=\"o\">.</span><span class=\"n\">browser</span> <span class=\"c\"># Checks
        redirection URL</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"o\">.</span><span
        class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&apos;/login/fail/&apos;</span><span
        class=\"p\">)</span> <span class=\"k\">assert</span> <span class=\"n\">br</span><span
        class=\"o\">.</span><span class=\"n\">find_element_by_id</span><span class=\"p\">(</span><span
        class=\"s\">&apos;main_title&apos;</span><span class=\"p\">)</span><span class=\"o\">.</span><span
        class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s\">&quot;Login
        failure&quot;</span> </pre></div> <p>Notice how the code follows the feature
        file? This will make tests much easier to understand for non-developer people.</p>
        <p>The test suite above is just a simple example which tests the login behavior.
        If needed, we can interact with more elements from the page using PhantomJS
        DOM access and manipulation methods. Refer to the <a href=\"http://selenium-python.readthedocs.org/api.html\">Selenium
        Python driver documentation</a> for a complete list of available methods.</p>
        <p>In order to clean up your tests, you can define shared methods. For example,
        we could have done this for the &quot;when&quot; part of our tests that are
        similar in both cases (success and failure).</p> <h2>Executing Tests</h2>
        <p>Tests can be executed at will, using the Django command-line interface:</p>
        <p>You should get the following terminal output:</p> <p><img src=\"https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/207/AFlZsQQ.png\"
        alt=\"Terminal output for our test\"></p> <p>The text results print to <em>stdout</em>.
        If all tests succeed, the command return code will be 0. In POSIX fashion,
        this means success. If one - if not all - of the tests fail, the command return
        code will be greater than 0. This means failure.</p> <p>The return code is
        used when your code is automatically tested on a CI system, such as <a href=\"https://semaphoreci.com/\">SemaphoreCI</a>.
        If you need to add this command to your SemaphoreCI tests, you can read <a
        href=\"https://semaphoreci.com/docs/customizing-build-commands.html\">this
        article on how to customize build commands</a>.</p> <h2>General Note About
        Testing</h2> <p><em>This general note covers <a href=\"https://en.wikipedia.org/wiki/Unit_testing\">Unit
        Testing</a> and BDD feature testing.</em></p> <p>There is no limit to the
        number of tests you can create, although it is a good idea to avoid writing
        too many of them. Depending on what your application does, you will generally
        be better off going straight to the point. Write only tests that are mission
        critical.</p> <p>When writing software, always remember that code quality
        is more important than how deep your code is tested - <em>not to say tests
        are trivial</em>. Tests ensure that your features remain resilient over time.</p>
        <p>They help you grow your codebase substantially over time, without testing
        everything by hand before each release.</p> <p>There are some exceptions to
        that, of course. Systems that may potentially temper with someone&apos;s life,
        health or finances upon failure <em>must</em> put a huge emphasis on test
        coverage (unit tests) and edge use case tests (BDD feature tests).</p> <p>For
        more on the topic, you can read about <a href=\"http://adaptiveobjectmodel.com/2012/01/what-is-pragmatic-tdd/\">Pragmatic
        Test-Driven Development</a>.</p> <h2>Conclusion</h2> <p>This tutorial outlined
        the procedure on writing BDD feature tests for a simple application.</p> <p>The
        power of BDD feature tests lies in the fact that they&apos;re located on the
        delivery-end of your workflow. This is great, because sole unit tests don&apos;t
        guarantee your app will work as expected in production environments, while
        BDD feature tests do.</p> <p>BDD abstracts the tester&apos;s point of view.
        This is done by leveraging the power of writing human-readable text scenarios
        to abstract a wide range of possible test cases, which the tester may not
        be aware of when writing complex test scripts, or testing all scenarios manually.</p>
        </section></div>","next_page_url":null,"url":"https://semaphoreci.com/community/tutorials/setting-up-a-bdd-stack-on-a-django-application","domain":"semaphoreci.com","excerpt":"Boost
        your Django and Python stack with Behavior Driven Development. Learn to write
        great BDD tests for your application and avoid use-case mistakes.","word_count":1905,"direction":"ltr","total_pages":1,"rendered_pages":1}'}
    headers:
      Access-Control-Allow-Origin: ['*']
      Age: ['0']
      Connection: [keep-alive]
      Content-Type: [application/json]
      Date: ['Sun, 27 Nov 2016 19:38:10 GMT']
      Server: [BitBalloon]
      Transfer-Encoding: [chunked]
      Vary: [Accept-Encoding]
      Via: [1.1 59574f77a7cf2d23d64904db278e5711.cloudfront.net (CloudFront)]
      X-Amz-Cf-Id: [W5IluheFWpWhgyzUd_j8Hp22mjK_yPlq7y4oQESox1pYTswN17rcNw==]
      X-Amzn-Requestid: [0781838e-b4d9-11e6-9915-01df1aaf3824]
      X-Amzn-Trace-Id: [Root=1-583b3622-e5ec1295d30ea873057c8825]
      X-Cache: [Miss from cloudfront]
      content-length: ['33851']
    status: {code: 200, message: OK}
version: 1
